/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RecurringInvoice as PrismaRecurringInvoice,
} from "@prisma/client";

export class RecurringInvoiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RecurringInvoiceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.recurringInvoice.count(args);
  }

  async recurringInvoices<T extends Prisma.RecurringInvoiceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecurringInvoiceFindManyArgs>
  ): Promise<PrismaRecurringInvoice[]> {
    return this.prisma.recurringInvoice.findMany<Prisma.RecurringInvoiceFindManyArgs>(
      args
    );
  }
  async recurringInvoice<T extends Prisma.RecurringInvoiceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecurringInvoiceFindUniqueArgs>
  ): Promise<PrismaRecurringInvoice | null> {
    return this.prisma.recurringInvoice.findUnique(args);
  }
  async createRecurringInvoice<T extends Prisma.RecurringInvoiceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecurringInvoiceCreateArgs>
  ): Promise<PrismaRecurringInvoice> {
    return this.prisma.recurringInvoice.create<T>(args);
  }
  async updateRecurringInvoice<T extends Prisma.RecurringInvoiceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecurringInvoiceUpdateArgs>
  ): Promise<PrismaRecurringInvoice> {
    return this.prisma.recurringInvoice.update<T>(args);
  }
  async deleteRecurringInvoice<T extends Prisma.RecurringInvoiceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RecurringInvoiceDeleteArgs>
  ): Promise<PrismaRecurringInvoice> {
    return this.prisma.recurringInvoice.delete(args);
  }
}
