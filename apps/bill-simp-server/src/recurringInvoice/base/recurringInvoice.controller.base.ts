/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RecurringInvoiceService } from "../recurringInvoice.service";
import { RecurringInvoiceCreateInput } from "./RecurringInvoiceCreateInput";
import { RecurringInvoice } from "./RecurringInvoice";
import { RecurringInvoiceFindManyArgs } from "./RecurringInvoiceFindManyArgs";
import { RecurringInvoiceWhereUniqueInput } from "./RecurringInvoiceWhereUniqueInput";
import { RecurringInvoiceUpdateInput } from "./RecurringInvoiceUpdateInput";

export class RecurringInvoiceControllerBase {
  constructor(protected readonly service: RecurringInvoiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RecurringInvoice })
  async createRecurringInvoice(
    @common.Body() data: RecurringInvoiceCreateInput
  ): Promise<RecurringInvoice> {
    return await this.service.createRecurringInvoice({
      data: data,
      select: {
        amount: true,
        client: true,
        createdAt: true,
        description: true,
        endDate: true,
        frequency: true,
        id: true,
        recurringInvoiceNumber: true,
        startDate: true,
        status: true,
        updatedAt: true,
        user: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RecurringInvoice] })
  @ApiNestedQuery(RecurringInvoiceFindManyArgs)
  async recurringInvoices(
    @common.Req() request: Request
  ): Promise<RecurringInvoice[]> {
    const args = plainToClass(RecurringInvoiceFindManyArgs, request.query);
    return this.service.recurringInvoices({
      ...args,
      select: {
        amount: true,
        client: true,
        createdAt: true,
        description: true,
        endDate: true,
        frequency: true,
        id: true,
        recurringInvoiceNumber: true,
        startDate: true,
        status: true,
        updatedAt: true,
        user: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RecurringInvoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async recurringInvoice(
    @common.Param() params: RecurringInvoiceWhereUniqueInput
  ): Promise<RecurringInvoice | null> {
    const result = await this.service.recurringInvoice({
      where: params,
      select: {
        amount: true,
        client: true,
        createdAt: true,
        description: true,
        endDate: true,
        frequency: true,
        id: true,
        recurringInvoiceNumber: true,
        startDate: true,
        status: true,
        updatedAt: true,
        user: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RecurringInvoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRecurringInvoice(
    @common.Param() params: RecurringInvoiceWhereUniqueInput,
    @common.Body() data: RecurringInvoiceUpdateInput
  ): Promise<RecurringInvoice | null> {
    try {
      return await this.service.updateRecurringInvoice({
        where: params,
        data: data,
        select: {
          amount: true,
          client: true,
          createdAt: true,
          description: true,
          endDate: true,
          frequency: true,
          id: true,
          recurringInvoiceNumber: true,
          startDate: true,
          status: true,
          updatedAt: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RecurringInvoice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRecurringInvoice(
    @common.Param() params: RecurringInvoiceWhereUniqueInput
  ): Promise<RecurringInvoice | null> {
    try {
      return await this.service.deleteRecurringInvoice({
        where: params,
        select: {
          amount: true,
          client: true,
          createdAt: true,
          description: true,
          endDate: true,
          frequency: true,
          id: true,
          recurringInvoiceNumber: true,
          startDate: true,
          status: true,
          updatedAt: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
