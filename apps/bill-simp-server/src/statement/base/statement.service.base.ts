/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Statement as PrismaStatement } from "@prisma/client";

export class StatementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StatementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.statement.count(args);
  }

  async statements<T extends Prisma.StatementFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StatementFindManyArgs>
  ): Promise<PrismaStatement[]> {
    return this.prisma.statement.findMany<Prisma.StatementFindManyArgs>(args);
  }
  async statement<T extends Prisma.StatementFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StatementFindUniqueArgs>
  ): Promise<PrismaStatement | null> {
    return this.prisma.statement.findUnique(args);
  }
  async createStatement<T extends Prisma.StatementCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StatementCreateArgs>
  ): Promise<PrismaStatement> {
    return this.prisma.statement.create<T>(args);
  }
  async updateStatement<T extends Prisma.StatementUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StatementUpdateArgs>
  ): Promise<PrismaStatement> {
    return this.prisma.statement.update<T>(args);
  }
  async deleteStatement<T extends Prisma.StatementDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StatementDeleteArgs>
  ): Promise<PrismaStatement> {
    return this.prisma.statement.delete(args);
  }
}
