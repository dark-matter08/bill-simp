/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Statement } from "./Statement";
import { StatementCountArgs } from "./StatementCountArgs";
import { StatementFindManyArgs } from "./StatementFindManyArgs";
import { StatementFindUniqueArgs } from "./StatementFindUniqueArgs";
import { CreateStatementArgs } from "./CreateStatementArgs";
import { UpdateStatementArgs } from "./UpdateStatementArgs";
import { DeleteStatementArgs } from "./DeleteStatementArgs";
import { StatementService } from "../statement.service";
@graphql.Resolver(() => Statement)
export class StatementResolverBase {
  constructor(protected readonly service: StatementService) {}

  async _statementsMeta(
    @graphql.Args() args: StatementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Statement])
  async statements(
    @graphql.Args() args: StatementFindManyArgs
  ): Promise<Statement[]> {
    return this.service.statements(args);
  }

  @graphql.Query(() => Statement, { nullable: true })
  async statement(
    @graphql.Args() args: StatementFindUniqueArgs
  ): Promise<Statement | null> {
    const result = await this.service.statement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Statement)
  async createStatement(
    @graphql.Args() args: CreateStatementArgs
  ): Promise<Statement> {
    return await this.service.createStatement({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Statement)
  async updateStatement(
    @graphql.Args() args: UpdateStatementArgs
  ): Promise<Statement | null> {
    try {
      return await this.service.updateStatement({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Statement)
  async deleteStatement(
    @graphql.Args() args: DeleteStatementArgs
  ): Promise<Statement | null> {
    try {
      return await this.service.deleteStatement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
