/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Quotation as PrismaQuotation } from "@prisma/client";

export class QuotationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QuotationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.quotation.count(args);
  }

  async quotations<T extends Prisma.QuotationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuotationFindManyArgs>
  ): Promise<PrismaQuotation[]> {
    return this.prisma.quotation.findMany<Prisma.QuotationFindManyArgs>(args);
  }
  async quotation<T extends Prisma.QuotationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuotationFindUniqueArgs>
  ): Promise<PrismaQuotation | null> {
    return this.prisma.quotation.findUnique(args);
  }
  async createQuotation<T extends Prisma.QuotationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuotationCreateArgs>
  ): Promise<PrismaQuotation> {
    return this.prisma.quotation.create<T>(args);
  }
  async updateQuotation<T extends Prisma.QuotationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuotationUpdateArgs>
  ): Promise<PrismaQuotation> {
    return this.prisma.quotation.update<T>(args);
  }
  async deleteQuotation<T extends Prisma.QuotationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuotationDeleteArgs>
  ): Promise<PrismaQuotation> {
    return this.prisma.quotation.delete(args);
  }
}
