/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QuotationService } from "../quotation.service";
import { QuotationCreateInput } from "./QuotationCreateInput";
import { Quotation } from "./Quotation";
import { QuotationFindManyArgs } from "./QuotationFindManyArgs";
import { QuotationWhereUniqueInput } from "./QuotationWhereUniqueInput";
import { QuotationUpdateInput } from "./QuotationUpdateInput";

export class QuotationControllerBase {
  constructor(protected readonly service: QuotationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Quotation })
  async createQuotation(
    @common.Body() data: QuotationCreateInput
  ): Promise<Quotation> {
    return await this.service.createQuotation({
      data: data,
      select: {
        client: true,
        createdAt: true,
        description: true,
        id: true,
        items: true,
        quotationDate: true,
        quotationNumber: true,
        total: true,
        updatedAt: true,
        validUntil: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Quotation] })
  @ApiNestedQuery(QuotationFindManyArgs)
  async quotations(@common.Req() request: Request): Promise<Quotation[]> {
    const args = plainToClass(QuotationFindManyArgs, request.query);
    return this.service.quotations({
      ...args,
      select: {
        client: true,
        createdAt: true,
        description: true,
        id: true,
        items: true,
        quotationDate: true,
        quotationNumber: true,
        total: true,
        updatedAt: true,
        validUntil: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Quotation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async quotation(
    @common.Param() params: QuotationWhereUniqueInput
  ): Promise<Quotation | null> {
    const result = await this.service.quotation({
      where: params,
      select: {
        client: true,
        createdAt: true,
        description: true,
        id: true,
        items: true,
        quotationDate: true,
        quotationNumber: true,
        total: true,
        updatedAt: true,
        validUntil: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Quotation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQuotation(
    @common.Param() params: QuotationWhereUniqueInput,
    @common.Body() data: QuotationUpdateInput
  ): Promise<Quotation | null> {
    try {
      return await this.service.updateQuotation({
        where: params,
        data: data,
        select: {
          client: true,
          createdAt: true,
          description: true,
          id: true,
          items: true,
          quotationDate: true,
          quotationNumber: true,
          total: true,
          updatedAt: true,
          validUntil: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Quotation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQuotation(
    @common.Param() params: QuotationWhereUniqueInput
  ): Promise<Quotation | null> {
    try {
      return await this.service.deleteQuotation({
        where: params,
        select: {
          client: true,
          createdAt: true,
          description: true,
          id: true,
          items: true,
          quotationDate: true,
          quotationNumber: true,
          total: true,
          updatedAt: true,
          validUntil: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
