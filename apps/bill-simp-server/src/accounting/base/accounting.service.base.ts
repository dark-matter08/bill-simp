/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Accounting as PrismaAccounting } from "@prisma/client";

export class AccountingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccountingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accounting.count(args);
  }

  async accountings<T extends Prisma.AccountingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccountingFindManyArgs>
  ): Promise<PrismaAccounting[]> {
    return this.prisma.accounting.findMany<Prisma.AccountingFindManyArgs>(args);
  }
  async accounting<T extends Prisma.AccountingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccountingFindUniqueArgs>
  ): Promise<PrismaAccounting | null> {
    return this.prisma.accounting.findUnique(args);
  }
  async createAccounting<T extends Prisma.AccountingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccountingCreateArgs>
  ): Promise<PrismaAccounting> {
    return this.prisma.accounting.create<T>(args);
  }
  async updateAccounting<T extends Prisma.AccountingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccountingUpdateArgs>
  ): Promise<PrismaAccounting> {
    return this.prisma.accounting.update<T>(args);
  }
  async deleteAccounting<T extends Prisma.AccountingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccountingDeleteArgs>
  ): Promise<PrismaAccounting> {
    return this.prisma.accounting.delete(args);
  }
}
