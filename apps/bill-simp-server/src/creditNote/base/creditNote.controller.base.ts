/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CreditNoteService } from "../creditNote.service";
import { CreditNoteCreateInput } from "./CreditNoteCreateInput";
import { CreditNote } from "./CreditNote";
import { CreditNoteFindManyArgs } from "./CreditNoteFindManyArgs";
import { CreditNoteWhereUniqueInput } from "./CreditNoteWhereUniqueInput";
import { CreditNoteUpdateInput } from "./CreditNoteUpdateInput";

export class CreditNoteControllerBase {
  constructor(protected readonly service: CreditNoteService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreditNote })
  async createCreditNote(
    @common.Body() data: CreditNoteCreateInput
  ): Promise<CreditNote> {
    return await this.service.createCreditNote({
      data: data,
      select: {
        amount: true,
        client: true,
        createdAt: true,
        creditNoteDate: true,
        creditNoteNumber: true,
        id: true,
        reason: true,
        status: true,
        updatedAt: true,
        user: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CreditNote] })
  @ApiNestedQuery(CreditNoteFindManyArgs)
  async creditNotes(@common.Req() request: Request): Promise<CreditNote[]> {
    const args = plainToClass(CreditNoteFindManyArgs, request.query);
    return this.service.creditNotes({
      ...args,
      select: {
        amount: true,
        client: true,
        createdAt: true,
        creditNoteDate: true,
        creditNoteNumber: true,
        id: true,
        reason: true,
        status: true,
        updatedAt: true,
        user: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreditNote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async creditNote(
    @common.Param() params: CreditNoteWhereUniqueInput
  ): Promise<CreditNote | null> {
    const result = await this.service.creditNote({
      where: params,
      select: {
        amount: true,
        client: true,
        createdAt: true,
        creditNoteDate: true,
        creditNoteNumber: true,
        id: true,
        reason: true,
        status: true,
        updatedAt: true,
        user: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreditNote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCreditNote(
    @common.Param() params: CreditNoteWhereUniqueInput,
    @common.Body() data: CreditNoteUpdateInput
  ): Promise<CreditNote | null> {
    try {
      return await this.service.updateCreditNote({
        where: params,
        data: data,
        select: {
          amount: true,
          client: true,
          createdAt: true,
          creditNoteDate: true,
          creditNoteNumber: true,
          id: true,
          reason: true,
          status: true,
          updatedAt: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreditNote })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCreditNote(
    @common.Param() params: CreditNoteWhereUniqueInput
  ): Promise<CreditNote | null> {
    try {
      return await this.service.deleteCreditNote({
        where: params,
        select: {
          amount: true,
          client: true,
          createdAt: true,
          creditNoteDate: true,
          creditNoteNumber: true,
          id: true,
          reason: true,
          status: true,
          updatedAt: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
