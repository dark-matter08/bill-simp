/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreditNote } from "./CreditNote";
import { CreditNoteCountArgs } from "./CreditNoteCountArgs";
import { CreditNoteFindManyArgs } from "./CreditNoteFindManyArgs";
import { CreditNoteFindUniqueArgs } from "./CreditNoteFindUniqueArgs";
import { CreateCreditNoteArgs } from "./CreateCreditNoteArgs";
import { UpdateCreditNoteArgs } from "./UpdateCreditNoteArgs";
import { DeleteCreditNoteArgs } from "./DeleteCreditNoteArgs";
import { CreditNoteService } from "../creditNote.service";
@graphql.Resolver(() => CreditNote)
export class CreditNoteResolverBase {
  constructor(protected readonly service: CreditNoteService) {}

  async _creditNotesMeta(
    @graphql.Args() args: CreditNoteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CreditNote])
  async creditNotes(
    @graphql.Args() args: CreditNoteFindManyArgs
  ): Promise<CreditNote[]> {
    return this.service.creditNotes(args);
  }

  @graphql.Query(() => CreditNote, { nullable: true })
  async creditNote(
    @graphql.Args() args: CreditNoteFindUniqueArgs
  ): Promise<CreditNote | null> {
    const result = await this.service.creditNote(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CreditNote)
  async createCreditNote(
    @graphql.Args() args: CreateCreditNoteArgs
  ): Promise<CreditNote> {
    return await this.service.createCreditNote({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CreditNote)
  async updateCreditNote(
    @graphql.Args() args: UpdateCreditNoteArgs
  ): Promise<CreditNote | null> {
    try {
      return await this.service.updateCreditNote({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreditNote)
  async deleteCreditNote(
    @graphql.Args() args: DeleteCreditNoteArgs
  ): Promise<CreditNote | null> {
    try {
      return await this.service.deleteCreditNote(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
